<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="schedule.rnc" type="application/relax-ng-compact-syntax"?>
<?xml-model href="schedule.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<schedule>
    <meta>
        <startDate>2019-06-10</startDate>
    </meta>
    <day d="Monday">
        <title>XPath</title>
        <slot time="10:15:00">
            <title>Introduction to XPath in eXist-db and &lt;oXygen/&gt;</title>
            <act time="PT15M">
                <desc>Getting started with XPath and eXide</desc>
                <details>
                    <item>Open <link>http://newtfire.org:8338/exist/apps/eXide/index.html</link> (or
                        eXide within eXist-db on your own laptop, if you’ve installed it), click
                        “New XQuery”, and erase all content in the editing window. You’ll type your
                        XPath in the editing window and run it with the “Eval” button.</item>
                    <item>Learning XPath (and other languages, including XSLT, XQuery, Schematron)
                        means learning the …<examples>
                            <example>Vocabulary (e.g., the division operator in XPath is <code
                                    url="https://www.w3.org/TR/xpath-31/#id-arithmetic">div</code>,
                                not <code>/</code>)</example>
                            <example>Syntax (e.g., in XPath <emph>conditional expressions</emph>,
                                the <code url="https://www.w3.org/TR/xpath-31/#doc-xpath31-IfExpr"
                                    >if</code> test must be parenthesized and an <code>else</code>
                                is required: <code>if (condition) then 1 else ()</code>)</example>
                            <example>Function library (e.g., <code
                                    url="https://www.w3.org/TR/xpath-functions-31/#func-string-length"
                                    >string-length()</code> and <code
                                    url="https://www.w3.org/TR/xpath-functions-31/#func-count"
                                    >count()</code> are functions, but there is no
                                    <code>length()</code> or <code>len()</code> or
                                    <code>size()</code>)</example>
                        </examples></item>
                    <item>All XPath expressions return a <emph>sequence</emph>. Sequences may
                        contain <emph>nodes</emph> (elements, attributes, etc.), <emph>atomic
                        </emph>values (strings, numbers, etc.), or both. A sequence of one item is
                        nonetheless a sequence, as is an <emph>empty sequence</emph>. Nested
                        sequences are automatically flattened.<examples>
                            <example>Type a number and hit Eval. This is a one-item sequence that
                                consists of a single atomic value. Try integers and decimal numbers.
                                Try wrapping the number in parentheses.</example>
                            <example>Type a string (inside single or double quotes) and hit Eval.
                                This is a one-item sequence that consists of a single atomic value.
                                Try omitting the quotation marks. Try using curly quotation marks.
                                Try wrapping the string in parentheses.</example>
                            <example>Type empty parentheses and hit Eval. This is an empty
                                sequence.</example>
                            <example>Type multiple items of different types (numbers, strings),
                                separated by commas. Try wrapping them in parentheses. Try wrapping
                                them in multiple parentheses. Try removing the commas. This is a
                                multi-item sequence.</example>
                            <example>Try to type a nested sequence, e.g., <code>(1, 2, (3,
                                    4))</code>, and hit Eval. What result do you expect? What do you
                                get?</example>
                        </examples></item>
                </details>
            </act>
            <act time="PT25M">
                <desc>Simple XPath expressions</desc>
                <details>
                    <item>Review: strings and numbers (atomic values) are XPath expressions <examples>
                            <example><code>"Hi, Mom!"</code> (Strings are enclosed in single or
                                double quotation marks—straight, not curly)</example>
                            <example><code>1</code> (Numbers are not enclosed in quotation
                                marks)</example>
                            <example><code>1.0</code> (What should this return? <emph>lexical
                                    space</emph> and <emph>value space</emph>)</example>
                        </examples></item>
                    <item>Arithmetic expressions are XPath expressions<examples>
                            <example><code>1 + 1</code></example>
                            <example>Practice: <code>+</code>, <code>-</code>, <code>*</code>,
                                    <code>div</code>, <code>idiv</code>, <code>mod</code>
                                    (<code>/</code> is not division)</example>
                        </examples></item>
                    <item>XPath library functions (with no arguments) are XPath expressions<examples>
                            <example><code
                                    url="https://www.w3.org/TR/xpath-functions-31/#func-current-date"
                                    >current-date()</code></example>
                            <example><code
                                    url="https://www.w3.org/TR/xpath-functions-31/#func-current-time"
                                    >current-time()</code></example>
                            <example><code
                                    url="https://www.w3.org/TR/xpath-functions-31/#func-current-dateTime"
                                    >current-dateTime()</code></example>
                        </examples></item>
                    <item>XPath library functions (with arguments) are XPath expressions<examples>
                            <example><code
                                    url="https://www.w3.org/TR/xpath-functions-31/#func-upper-case"
                                    >upper-case('dhsi')</code> (How many arguments, and of what
                                type?)</example>
                            <example><code
                                    url="https://www.w3.org/TR/xpath-functions-31/#func-concat"
                                    >concat('Curly', 'Larry', 'Moe')</code> (How many arguments, and
                                of what type?)</example>
                            <example><code
                                    url="https://www.w3.org/TR/xpath-functions-31/#func-count"
                                    >count(('Curly', 'Larry', 'Moe'))</code> (Why two sets of
                                parentheses? Hint: How many arguments, and of what type?)</example>
                            <example>Function <emph>signature</emph> and <emph>cardinality</emph>:
                                    <code>count($items as item()*) as xs:integer</code></example>
                        </examples>
                    </item>
                    <item>Nested XPath library functions and operations are XPath expressions. Read
                        them from the inside out<examples>
                            <example><code url="https://www.w3.org/TR/xpath-functions-31/#func-max"
                                    >max((1 + 2, 10 div 5, 6 * 0.2))</code> (Remember those two sets
                                of parentheses?)</example>
                            <example><code
                                    url="https://www.w3.org/TR/xpath-functions-31/#func-translate"
                                    >translate(upper-case('Hi, Mom!'),'AEIOU','xxxxx')</code> (How
                                is this different from <code>upper-case(translate('Hi,
                                    Mom!','AEIOU','xxxxx'))</code>?)</example>
                            <example><code
                                    url="https://www.w3.org/TR/xpath-functions-31/#func-format-dateTime"
                                    >format-dateTime(current-dateTime(),'[h].[m01] [Pn] on [FNn],
                                    [D1o] [MNn]')</code></example>
                        </examples></item>
                    <item>Nested functions are hard to read. Use the <emph
                            url="https://www.w3.org/TR/xpath-31/#id-arrow-operator">arrow
                            operator</emph> (<code>=&gt;</code>) instead<examples>
                            <example><code>upper-case('Hi, Mom!') =>
                                    translate('AEIOU','xxxxx')</code></example>
                            <example><code>current-dateTime() => format-dateTime('[h].[m01][Pn] on
                                    [FNn], [D1o] [MNn]')</code></example>
                        </examples></item>
                    <item>Path expressions may span multiple lines (try it with the examples above),
                        that is, new-line and space have the same meaning</item>
                </details>
            </act>
            <act time="PT20M">
                <desc>XPath in &lt;oXygen/&gt;</desc>
                <details>
                    <item>Launch &lt;oXygen/&gt; editor, hit <q>Ctrl+u</q> (Windows) or <q>Cmd+u</q>
                        (MacOS), copy and paste the string
                            <link>http://newtfire.org:8338/exist/apps/shakespeare/data/ham.xml</link>,
                        and hit <q>OK</q>. (Backup copy at
                            <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/ham.xml</link>.)
                        This is a copy of <emph>Hamlet</emph> with TEI markup.</item>
                    <item>Set the dropdown in the upper left to <q>XPath 3.0</q>. (This widget is
                        called the <emph
                            url="https://www.oxygenxml.com/doc/versions/20.0/ug-editor/topics/xpath-console.html"
                            >XPath Toolbar</emph>.) Enter some XPath expressions (from above, such
                        as <code>1 + 1</code>). Limited to one line; hit <q>Enter</q> to run the
                        expression. The XPath Toolbar works only if you have an XML document open in
                        &lt;oXygen/&gt;, even if you aren’t using the document in your XPath
                        expression.</item>
                    <item>Go to Window → Show View → XPath/XQuery Builder. Set the dropdown in the
                        upper left to <q>XPath 3.0</q>. Enter some XPath expressions. May span
                        multiple lines; <q>Enter</q> for a new line. To run, hit <q>Ctrl+Enter</q>
                        (Windows) or <q>Cmd+Enter</q> (MacOS), or click the red right-pointed
                        triangle.</item>
                </details>
            </act>
            <act time="PT20M">
                <desc>XPath path expressions</desc>
                <details>
                    <item>An XPath <emph>path expression</emph> is a sequence of steps, each of
                        which proceeds from one node (called the <emph>context node</emph>) to a
                        sequence of zero (!) or more others. It returns the results in document
                        order (order of start tags). (Details at Kay 1227)</item>
                    <item>Sample XPath path expression: <code>/TEI/text/body/div</code>: start at
                        the document node, then navigate to a sequence of all its
                            <code>&lt;TEI&gt;</code> children. For each of those, navigate to all of
                        their <code>&lt;text&gt;</code> children, then to their
                            <code>&lt;body&gt;</code> children, and then to their
                            <code>&lt;div&gt;</code> children.</item>
                    <item>XPath steps are separated by single slashes (<code>/</code>).</item>
                    <item>An XPath expression that begins with a slash (<code>/</code>) starts at
                        the <emph>document node</emph>; this is an <emph>absolute path</emph>. Any
                        other XPath expression starts at the current context; this is a
                            <emph>relative path</emph>.</item>
                    <item>It is not an error to ask for something that doesn’t exist; it just
                        returns an empty sequence.</item>
                    <item>With <emph>Hamlet</emph> open and selected, go to the XPath Toolbar or
                        XPath Builder and try the following examples. Click on some of the results
                        in the lower panel:<examples>
                            <example><code>/TEI/teiHeader/fileDesc/titleStmt/title</code> (returns 1
                                    <code>&lt;title&gt;</code> element)</example>
                            <example><code>/TEI/text/body/div</code> (returns 5
                                    <code>&lt;div&gt;</code> elements)</example>
                            <example><code>/TEI/teiHeader/fileDesc/titleStmt/info</code> (returns no
                                results; this is not an error)</example>
                            <example><code>/TEI/teiHeader/fileDesc/title Stmt/title</code> (raises
                                an error; spaces are not allowed in path expressions)</example>
                        </examples></item>
                    <item>Namespaces matter in Real Life (XSLT, XQuery, Schematron), but the
                        &lt;oXygen/&gt; XPath Toolbar and XPath Builder take care of them for you
                        behind the scenes (eXide does not).</item>
                </details>
            </act>
            <act time="PT25M">
                <desc>XPath path steps</desc>
                <details>
                    <item>Path steps move along axes: <code>child::</code>, <code>parent::</code>,
                            <code>descendant::</code>, <code>ancestor::</code>,
                            <code>preceding-sibling::</code>, <code>following-sibling::</code>, etc.
                        See:
                            <link>http://dh.obdurodon.org/introduction-xpath.xhtml#xpath_axes</link>.</item>
                    <item>Axes are specified with a double colon, e.g., <code>descendant::div</code>
                        matches all <code>&lt;div&gt;</code> descendants of the current context
                        node. There are two common shortcut notations<examples>
                            <example>The default is the <emph>child</emph> axis, so
                                    <code>/TEI/teiHeader</code> is synonymous with
                                    <code>/child::TEI/child::teiHeader</code>. Use the
                                shorthand.</example>
                            <example><code>//</code> is shorthand for
                                    <code>/descendant-or-self::</code>, so <code>/TEI//div</code>
                                finds all of the <code>&lt;div&gt;</code> elements that are
                                descendants of the <code>&lt;TEI&gt;</code> root element, that is,
                                anywhere in the document. The document node has a descendant axis,
                                too: <code>//div</code>. Be careful with this one!</example>
                        </examples>
                    </item>
                    <item>Each path step returns a sequence of zero or more context nodes for the
                        next path step. Only the final path step is permitted to return something
                        other than a node. Why?</item>
                    <item>The end of a path expression may return nodes or atomic values<examples>
                            <example><code>//body/div/count(descendant::sp)</code> navigates from
                                the document node to all of the acts in the play and then returns a
                                count of the speeches in each act</example>
                            <example>What’s wrong with <code>//body/div/count(//sp)</code>?
                                    <answer>The leading double slash resets the current context to
                                    the document node, and selects all <code>&lt;sp&gt;</code>
                                    elements in the entire document, instead of just the individual
                                    act.</answer></example>
                        </examples></item>
                    <item><code>*</code> matches any element<examples>
                            <example><code>/TEI/teiHeader/*</code> matches all child elements of the
                                    <code>&lt;teiHeader&gt;</code></example>
                        </examples></item>
                    <item><code>..</code> matches the parent node of the current context node. That
                        is, it’s shorthand for <code>parent::*</code><examples>
                            <example><code>//stage/..</code> matches the parent nodes of all
                                    <code>&lt;stage&gt;</code> elements</example>
                        </examples></item>
                    <item>Your turn: <examples>
                            <example>Find the acts (<code>&lt;div&gt;</code> children of
                                    <code>&lt;body&gt;</code>) in <emph>Hamlet</emph>
                                <answer>
                                    <code>//body/div</code>
                                </answer></example>
                            <example>Find the stage directions (<code>&lt;stage&gt;</code>) in
                                    <emph>Hamlet</emph>
                                <answer>
                                    <code>//stage</code>
                                </answer></example>
                            <example>Find the <code>&lt;stage&gt;</code> children of
                                    <code>&lt;div&gt;</code> elements (but not other
                                    <code>&lt;stage&gt;</code> elements) in <emph>Hamlet</emph>
                                <answer>
                                    <code>//div/stage</code>
                                </answer></example>
                            <example>Find the parents of the stage directions in <emph>Hamlet</emph>
                                <answer>
                                    <code>//stage/..</code> or <code>//stage/parent::*</code>
                                </answer></example>
                            <example>Find the <code>&lt;div&gt;</code> parents of the stage
                                directions in <emph>Hamlet</emph>, but not other parents <answer>
                                    <code>//stage/parent::div</code>
                                </answer></example>
                        </examples></item>
                </details>
            </act>
        </slot>
        <slot time="13:30:00">
            <title>Exploring document structures and data with XPath</title>
            <act time="PT25M">
                <desc>XPath functions for strings</desc>
                <details>
                    <item><code url="https://www.w3.org/TR/xpath-functions-31/#func-concat"
                            >concat()</code>
                        <examples>
                            <example>
                                <code>concat('Curly','Larry','Moe')</code></example>
                            <example><code>concat('Curly is #', 1)</code></example>
                            <example>Or use the <emph
                                    url="https://www.w3.org/TR/xpath-31/#id-string-concat-expr"
                                    >concatenation operator</emph>: <code>'Curly is #' ||
                                1</code></example>
                            <example>What’s wrong with <code>concat(//speaker)</code>? <answer>The
                                    arguments to <code>concat()</code> must be two or more
                                    individual atomic (or atomizable) items, and
                                        <code>//speaker</code> is a sequence</answer></example>
                        </examples>
                    </item>
                    <item><code url="https://www.w3.org/TR/xpath-functions-31/#func-string-join"
                            >string-join()</code><examples>
                            <example><code>string-join(( 'Curly', 'Larry', 'Moe'), ',
                                ')</code></example>
                            <example><code>string-join(//speaker, ', ')</code></example>
                            <example><code>string-join(//speaker)</code> Why does this work when
                                    <code>concat(//speaker)</code> didn’t? <answer>The first
                                    argument to <code>string-join()</code> is a sequence. All
                                    arguments to <code>concat()</code> must be atomic or
                                    atomizable.</answer></example>
                        </examples></item>
                    <item><code url="https://www.w3.org/TR/xpath-functions-31/#func-string-length"
                            >string-length()</code><examples>
                            <example><code>string-length('Curly, Larry, and Moe')</code></example>
                        </examples></item>
                    <item><code url="https://www.w3.org/TR/xpath-functions-31/#func-lower-case"
                            >lower-case()</code>, <code
                            url="https://www.w3.org/TR/xpath-functions-31/#func-upper-case"
                            >upper-case()</code>
                        <examples>
                            <example><code>lower-case('Curly, Larry, and Moe')</code></example>
                        </examples></item>
                    <item><code url="https://www.w3.org/TR/xpath-functions-31/#func-normalize-space"
                            >normalize-space()</code><examples>
                            <example><code>normalize-space(' Curly, Larry, Moe ')</code></example>
                        </examples></item>
                    <item><code
                            url="https://www.w3.org/TR/xpath-functions-31/#func-substring-before"
                            >substring-before()</code>, <code
                            url="https://www.w3.org/TR/xpath-functions-31/#func-substring-after"
                            >substring-after()</code><examples>
                            <example><code>substring-before('Larry', 'r')</code> What if there’s
                                more than one?</example>
                            <example><code>substring-after('Larry', 'r')</code> What if there’s more
                                than one?</example>
                        </examples></item>
                    <item><code url="https://www.w3.org/TR/xpath-functions-31/#func-substring"
                            >substring()</code><examples>
                            <example><code>substring('Curly', 1, 2)</code> XPath starts counting
                                with 1 (not 0).</example>
                        </examples></item>
                    <item><code url="https://www.w3.org/TR/xpath-functions-31/#func-contains"
                            >contains()</code> Foreshadowing: This returns a Boolean
                            (<code>True</code> or <code>False</code>) value. How might this be useful?<examples>
                            <example><code>contains('Ophelia', 'ph')</code></example>
                            <example><code>//speaker/contains(., 'ph')</code> (the dot refers to the
                                current context item)</example>
                        </examples></item>
                    <item><code url="https://www.w3.org/TR/xpath-functions-31/#func-starts-with"
                            >starts-with()</code>, <code
                            url="https://www.w3.org/TR/xpath-functions-31/#func-ends-with"
                            >ends-with()</code><examples>
                            <example><code>starts-with('Ophelia', 'Op')</code></example>
                        </examples></item>
                </details>
            </act>
            <act time="PT20M">
                <desc>XPath functions for numbers</desc>
                <details>
                    <item><code url="https://www.w3.org/TR/xpath-functions-31/#func-max"
                            >max()</code>, <code
                            url="https://www.w3.org/TR/xpath-functions-31/#func-min">min()</code>,
                            <code url="https://www.w3.org/TR/xpath-functions-31/#func-sum"
                            >sum()</code>, <code
                            url="https://www.w3.org/TR/xpath-functions-31/#func-avg">avg()</code><examples>
                            <example><code>max((1, 2, 3))</code>, etc.</example>
                            <example>What happens when these are applied to strings? To a sequence
                                that mixes strings and numbers?</example>
                        </examples></item>
                    <item><code url="https://www.w3.org/TR/xpath-functions-31/#func-ceiling"
                            >ceiling()</code>, <code
                            url="https://www.w3.org/TR/xpath-functions-31/#func-floor"
                            >floor()</code>
                        <examples>
                            <example><code>ceiling(3.141592653)</code></example>
                        </examples></item>
                    <item><code url="https://www.w3.org/TR/xpath-functions-31/#func-round"
                            >round()</code><examples>
                            <example><code>round(3.141592653, 4)</code></example>
                        </examples></item>
                    <item><code url="https://www.w3.org/TR/xpath-functions-31/#func-format-integer"
                            >format-integer()</code>, <code
                            url="https://www.w3.org/TR/xpath-functions-31/#func-format-number"
                            >format-number()</code><examples>
                            <example><code>format-integer(154,'w')</code></example>
                            <example><code>format-integer(154,'I')</code></example>
                            <example><code>format-number(1, '#.000')</code></example>
                        </examples></item>
                    <item>Find the length in character count of each <code>&lt;speaker&gt;</code>
                        <answer><code>//speaker/string-length()</code> (why doesn’t
                                <code>string-length(//speaker)</code> work?)</answer></item>
                    <item>Find the length of the longest speaker name
                                <answer><code>max(//speaker/string-length())</code></answer></item>
                </details>
            </act>
            <act time="PT15M">
                <desc>XPath functions for sequences</desc>
                <details>
                    <item><code url="https://www.w3.org/TR/xpath-functions-31/#func-distinct-values"
                            >distinct-values()</code>
                        <examples>
                            <example><code>distinct-values(/TEI//speaker)</code></example>
                        </examples></item>
                    <item><code url="https://www.w3.org/TR/xpath-functions-31/#func-count"
                            >count()</code><examples>
                            <example><code>count(('Curly', 'Larry', 'Moe',
                                'Curly'))</code></example>
                            <example><code>count(distinct-values(('Curly', 'Larry', 'Moe',
                                    'Curly')))</code></example>
                            <example><code>distinct-values(count(('Curly', 'Larry', 'Moe',
                                    'Curly')))</code></example>
                        </examples></item>
                    <item><code url="https://www.w3.org/TR/xpath-functions-31/#func-sort"
                            >sort()</code><examples>
                            <example><code>sort(//speaker)</code></example>
                            <example><code>sort(//speaker,(), function($item)
                                    {string-length($item)})</code></example>
                        </examples></item>
                    <item>Your turn: <examples>
                            <example>How many <code>&lt;speaker&gt;</code> elements are there in
                                    <emph>Hamlet</emph>?
                                    <answer><code>count(//speaker)</code></answer></example>
                            <example>How many <emph>distinct</emph>
                                <code>&lt;speaker&gt;</code> elements are there in
                                    <emph>Hamlet</emph>?
                                        <answer><code>count(distinct-values(//speaker))</code></answer></example>
                            <example>How many acts are there in <emph>Hamlet</emph>?
                                        <answer><code>count(//body/div)</code></answer></example>
                            <example>How many scenes are there in <emph>Hamlet</emph>?
                                        <answer><code>count(//div/div)</code></answer></example>
                            <example>What does <code>count(//div)</code> tell you about
                                    <emph>Hamlet</emph>, and why is it unhelpful? <answer>It counts
                                        <code>&lt;div&gt;</code> elements of different types
                                    together: acts, scenes, cast list.</answer></example>
                        </examples></item>
                </details>
            </act>
            <act time="PT10M">
                <desc>Looking Stuff Up: XPath function signatures and cardinality</desc>
                <details>
                    <item>The <emph>function signature</emph> is the number and type of arguments it
                        accepts or requires, and the number and type of items it returns</item>
                    <item><emph>Type error</emph>: <code>string-length(1.2345)</code></item>
                    <item><emph>Cardinality error</emph>:
                        <code>string-length(/TEI/speaker)</code></item>
                    <item>Why is <code>count(/TEI//speaker)</code> okay, while <code>count('Curly',
                            'Larry', 'Moe')</code> is broken?</item>
                    <item>The error message is your friend. Read it.</item>
                    <item>Resources and references:
                            <link>https://ebeshero.github.io/UpTransformation/References.html</link></item>
                    <!--<item>Mozilla Development Network (MDN):
                            <link>https://developer.mozilla.org/en-US/docs/Web/XPath</link></item>-->
                </details>
            </act>
            <act time="PT10M">
                <desc>Break</desc>
            </act>
            <act time="PT20M">
                <desc>XPath predicates</desc>
                <details>
                    <item><emph>Predicates</emph>, in square brackets after a path step,
                            <emph>filter</emph> the results</item>
                    <item>Numerical predicates<examples>
                            <example><code>//body/div[3]</code> matches the third
                                    <code>&lt;div&gt;</code> child of each <code>&lt;body&gt;</code>
                                element (same as <code>//body/div[position() eq 3]</code></example>
                            <example><code>//body/div[last()]</code> matches the last
                                    <code>&lt;div&gt;</code> child of each <code>&lt;body&gt;</code>
                                element</example>
                        </examples></item>
                    <item>Predicates with node tests<examples>
                            <example><code>//stage[parent::div]</code> is equivalent to
                                    <code>//div/stage</code></example>
                        </examples></item>
                    <item>Predicates with operators and functions<examples>
                            <example><code>//sp[speaker eq 'Ophelia']</code></example>
                            <example><code>//sp[contains(speaker, 'Rosencrantz')]</code></example>
                            <example><code>//lg[@type eq 'couplet']</code></example>
                        </examples></item>
                </details>
            </act>
            <act time="PT15M">
                <desc>Odds and ends</desc>
                <details>
                    <item>Three ways to apply a function to a sequence<examples>
                            <example>Explicit <code>for</code><examples>
                                    <example><code>for $speaker in /TEI//speaker return
                                            string-length($speaker)</code></example>
                                </examples></example>
                            <example>Implicit <code>for</code><examples>
                                    <example><code>/TEI//speaker/string-length()</code></example>
                                </examples></example>
                            <example>Simple map (<code
                                    url="https://www.w3.org/TR/xpath-31/#id-map-operator">!</code>)<examples>
                                    <example><code>/TEI//speaker ! string-length(.)</code></example>
                                </examples></example>
                        </examples></item>
                    <item>Difference between simple map (<code
                            url="https://www.w3.org/TR/xpath-31/#id-map-operator">!</code>) and
                        arrow (<code url="https://www.w3.org/TR/xpath-31/#id-arrow-operator"
                            >=></code>) <examples>
                            <example><code>('Curly', 'Larry', 'Moe') => count()</code></example>
                            <example><code>('Curly', 'Larry', 'Moe') ! count(.)</code></example>
                        </examples></item>
                    <!--<item>Concatenating nodes<examples>
                            <example><code>string-join()</code><examples>
                                    <example><code>string-join(( 'Curly', 'Larry', 'Moe'), ',
                                            ')</code></example>
                                    <example><code>concat(/TEI//speaker, ', ')</code> Why doesn’t
                                        this work?</example>
                                    <example><code>string-join(/TEI//speaker, ', ')</code> Use this
                                        instead</example>
                                </examples></example>
                        </examples></item>-->
                </details>
            </act>
            <act time="PT35M">
                <desc>Read and evaluate XML projects with XPath</desc>
                <details>
                    <item>How many speeches (<code>&lt;sp&gt;</code>) does Ophelia have?
                                <answer><code>count(//sp[speaker eq
                        'Ophelia'])</code></answer></item>
                    <item>How many speeches does Ophelia have in Act 2?
                                <answer><code>count(//body/div[2]//sp[speaker eq
                            'Ophelia'])</code></answer></item>
                    <item>What types of elements can have stage directions
                            (<code>&lt;stage&gt;</code>) as children? (Hint: use the <code
                            url="https://www.w3.org/TR/xpath-functions-31/#func-name">name()</code>
                        function.)
                        <answer><code>distinct-values(//stage/../name())</code></answer></item>
                    <item>How many speeches don’t contain any metrical line child elements
                            (<code>&lt;l&gt;</code>)? (Hint: use the <code
                            url="https://www.w3.org/TR/xpath-functions-31/#func-not">not()</code>
                        function.) <answer><code>count(//sp[not(l)])</code></answer></item>
                    <item>Building on your answer to the last question, who are the speakers of
                        those speeches?
                            <answer><code>distinct-values(//sp[not(l)]/speaker)</code></answer></item>
                    <item>Building on your answer to the last two questions, what kinds of elements
                        they contain instead?
                                <answer><code>distinct-values(//sp[not(l)]/*/name())</code></answer></item>
                    <item>What is Hamlet’s first spoken line (<code>&lt;l&gt;</code>)?
                                <answer><code>(//sp[speaker eq
                        'Hamlet']/l)[1]</code></answer></item>
                    <item>What is the last stage direction in the entire document?
                                <answer><code>(//stage)[last()]</code></answer></item>
                    <item>How many speeches have more than 8 line children?
                                <answer><code>count(//sp[count(l) gt 8])</code></answer></item>
                    <item>Building on your answer to the preceding question, how many line children
                        does each of those speeches have? <answer><code>//sp[count(l) gt
                                8]/count(l)</code></answer></item>
                    <item>Building on your answers to the preceding two questions, who are the
                        speakers of speeches that have more than 8 line children?
                                <answer><code>distinct-values(//sp[count(l) gt
                            8]/speaker)</code></answer></item>
                    <item>How long is the longest speech?
                                <answer><code>max(//sp/string-length())</code> (or, better:
                                <code>max(//sp/string-length(normalize-space()))</code>)</answer></item>
                    <item>Building on your answer to the last question, who is the speaker of the
                        longest speech? <answer><code>//sp[string-length() eq
                                max(//sp/string-length())]/speaker</code> (or, better:
                                <code>//sp[string-length(normalize-space()) eq
                                max(//sp/string-length(normalize-space()))]/speaker</code>)</answer></item>
                </details>
            </act>
        </slot>
    </day>
    <day d="Tuesday">
        <title>XPath and XQuery</title>
        <slot time="09:00:00">
            <title>XPath and XQuery in eXist-db</title>
            <act time="PT10M">
                <desc>Housekeeping: documents, collections, and namespaces</desc>
                <details>
                    <item>In the eXide window, click on the <q>New XQuery</q> tab. This brings up a
                        window with <code>xquery version "3.1";</code> at the top.</item>
                    <item>Access a document with <code>doc()</code>
                        <examples>
                            <example><code>doc('/db/apps/shakespeare/data/ham.xml')</code></example>
                        </examples>
                    </item>
                    <item>Access a collection of documents with <code>collection()</code>
                        <examples>
                            <example><code>collection('/db/apps/shakespeare/data/')</code></example>
                        </examples>
                    </item>
                    <item>Namespace declaration <examples>
                            <example><code>declare namespace
                                    tei="http://www.tei-c.org/ns/1.0";</code></example>
                            <example><code>&lt;stage&gt;</code> elements in <emph>Hamlet</emph>:
                                    <code>doc('/db/apps/shakespeare/data/ham.xml')//tei:stage</code></example>
                            <example>Find all the stage directions in the entire Shakespeare
                                collection
                                        <answer><code>collection('/db/apps/shakespeare/data/')//tei:stage</code></answer>
                            </example>
                        </examples></item>
                </details>
            </act>
            <act time="PT30M">
                <desc>The seven types of nodes</desc>
                <details>
                    <item><code>document()</code></item>
                    <item><code>element()</code></item>
                    <item><code>attribute()</code><examples>
                            <example><code>collection('/db/apps/shakespeare/data/')//tei:sp/@who</code></example>
                            <example><code
                                    url="https://www.w3.org/TR/xpath-functions-31/#func-string"
                                    >collection('/db/apps/shakespeare/data/')//tei:sp/@who/string()</code></example>
                        </examples>
                    </item>
                    <item><code>text()</code> (not a function; not to be confused with
                            <code>string()</code>)<examples>
                            <example><code>doc('/db/mitford/literary/Charles1.xml')//tei:stage</code>
                                (Mary Russell Mitford’s <emph>Charles the First</emph>) </example>
                            <example>What does
                                    <code>doc('/db/mitford/literary/Charles1.xml')//tei:stage/string()</code>
                                return? <answer>The string values of the stage directions, that is,
                                    the stage directions with all markup stripped</answer></example>
                            <example>What does
                                    <code>doc('/db/mitford/literary/Charles1.xml')//tei:stage/text()</code>
                                return? <answer>The <code>text()</code> nodes in each stage
                                    direction</answer></example>
                        </examples>
                    </item>
                    <item>Rarely used: <code>comment()</code>, <code>namespace()</code>,
                            <code>processing-instruction()</code></item>
                </details>
            </act>
            <act time="PT25M">
                <desc>Neglected XPath axes</desc>
                <details>
                    <item><code>preceding::</code>, <code>following::</code><examples>
                            <example>Find all the stage directions (<code>&lt;stage&gt;</code>) that
                                precede Act 2, Scene 2 in <emph>Charles the First</emph>
                                <answer><code>doc('/db/mitford/literary/Charles1.xml')//tei:body/tei:div[2]/tei:div[2]/preceding::tei:stage</code></answer>
                            </example>
                        </examples></item>
                    <item><code>self::</code><examples>
                            <example><code>doc('/db/mitford/literary/Charles1.xml')//tei:body/tei:div/tei:div/tei:head/following-sibling::*[2]</code></example>
                            <example><code>doc('/db/mitford/literary/Charles1.xml')//tei:body/tei:div/tei:div/tei:head/following-sibling::*[2][self::tei:stage]</code></example>
                            <example><code>doc('/db/mitford/literary/Charles1.xml')//tei:body/tei:div/tei:div/tei:head/following-sibling::*[2][not(self::tei:stage)]</code></example>
                            <example><code>doc('/db/mitford/literary/Charles1.xml')//tei:speaker[.
                                    eq 'Queen.']</code></example>
                            <example><code>doc('/db/mitford/literary/Charles1.xml')//tei:speaker[self::node()
                                    eq 'Queen.']</code></example>
                        </examples></item>
                    <item><code>ancestor::</code>, <code>ancestor-or-self::</code>,
                            <code>descendant-or-self::</code>, <code>namespace::</code><examples>
                            <example><code>//speaker[. eq 'Queen.']/ancestor::div[@type eq
                                    'act']/@n</code></example>
                        </examples></item>
                </details>
            </act>
            <act time="PT40M">
                <desc> Scavenger hunt 1</desc>
                <details>
                    <item>Work with the Digital Mitford Site Index posted in eXist at
                            <code>/db/mitford/si.xml</code> or the official version at its external
                        location: <code>http://digitalmitford.org/si.xml</code> Can you find out the
                        following? <examples>
                            <example> Look at the <code>div</code> elements in the site index. What
                                attribute on this element can tell you how the document is
                                organized? Write an XPath that isolates these attribute values.
                                        <answer><code>doc('http://digitalmitford.org/si.xml')//tei:div/@type/string()</code></answer></example>
                            <example>Look element children of the <code>&lt;div&gt;</code> elements
                                (you can do this without seeing what all the elements are). What
                                attribute on these elements can be used to differentiate the various
                                lists in the document? Complete this XPath by isolating these
                                attribute values.
                                        <answer><code>doc('http://digitalmitford.org/si.xml')//tei:div/*/@sortKey</code>
                                    or
                                        <code>doc('http://digitalmitford.org/si.xml')//tei:div/*/@*</code></answer>
                            </example>
                            <example>Without knowing the names of the elements that are members of
                                lists, you can tell that all follow the same XPath pattern. What is
                                it?
                                        <answer><code>doc('http://digitalmitford.org/si.xml')//tei:div/*/*
                                        or </code> or
                                        <code>doc('http://digitalmitford.org/si.xml')//tei:div/*/*[@xml:id]</code></answer></example>
                            <example>The <code>@xml:id</code> for the play <emph>Charles the
                                    First</emph> in the site index is "CharlesI_MRMplay". References
                                to the play throughout the site index will be made with various
                                attributes that begin with a hashtag, formatted like this:
                                "#CharlesI_MRMplay". Knowing this, can you locate all the individual
                                entries in the site index lists that contain references of any kind
                                to the play?
                                        <answer><code>doc('http://digitalmitford.org/si.xml')//tei:div/*/*[@xml:id][descendant::*/@*="#CharlesI_MRMplay"]</code>
                                    How can you find out how many these are using a function?
                                        <code>doc('http://digitalmitford.org/si.xml')//tei:div/*/*[@xml:id][descendant::*/@*="#CharlesI_MRMplay"]
                                        => count()</code>
                                </answer>
                            </example>
                        </examples>
                    </item>
                </details>
            </act>
            <act time="PT10M">
                <desc>Break</desc>
            </act>
            <act time="PT35M">
                <desc>Regex in XPath</desc>
                <details>
                    <item><code>contains()</code> vs. <code>matches()</code><examples>
                            <example>
                                <code>doc('/db/mitford/literary/Charles1.xml')//tei:l[contains(.,
                                    'murder')]</code>
                            </example>
                            <example><code>doc('/db/mitford/literary/Charles1.xml')//tei:l[contains(.,
                                    'unrighteousness')]</code></example>
                            <example><code>doc('/db/mitford/literary/Charles1.xml')//tei:l[matches(.,
                                    '[a-z]{15,}','i')]</code></example>
                            <example>
                                <code>doc('/db/mitford/literary/Charles1.xml')//tei:*/text()[matches(.,
                                    '\d{4}')]</code>
                            </example>
                            <example><code>doc('/db/mitford/literary/Charles1.xml')//tei:*/text()[matches(.,
                                    '(^|\D)\d{4}($|\D)')]</code> Why is the number of results
                                smaller than for the previous expression?
                                <answer type="block">xquery version "3.1";
declare namespace tei="http://www.tei-c.org/ns/1.0";
let $a := doc('/db/mitford/literary/Charles1.xml')//tei:*/text()[matches(., '(^|\D)\d{4}($|\D)')]
let $b := doc('/db/mitford/literary/Charles1.xml')//tei:*/text()[matches(., '\d{4}')]
return $b except $a (: returns items in $b that are not in $a: )</answer></example>
                        </examples></item>
                    <item><code>translate()</code> vs. <code>replace()</code>
                        <examples>
                            <example>Try this expression,
                                    <code>doc('/db/mitford/literary/Charles1.xml')//tei:castList</code>,
                                and notice the pseudomarkup in the cast list.
                                    <code>translate()</code> to the rescue!
                                    <code>doc('/db/mitford/literary/Charles1.xml')//tei:castList//tei:roleDesc/translate(.,
                                    '()', '')</code></example>

                            <example>The next examples work with the <code>@xml:id</code>s on the
                                    <code>tei:l</code> elements. How can you get a look at the
                                    <code>@xml:id</code>s first?
                                        <answer><code>doc('/db/mitford/literary/Charles1.xml')//tei:l/@xml:id/string()</code></answer></example>
                            <example>Change the format of the line <code>@xml:id</code>s with
                                    <code>replace()</code>:
                                    <code>doc('/db/mitford/literary/Charles1.xml')//tei:l/replace(@xml:id,
                                    'Chas(_\w+_)', 'C1$1')</code></example>
                        </examples>
                    </item>
                    <item><code>substring-before()</code> and <code>substring-after()</code> vs.
                            <code>tokenize()</code>
                        <examples>
                            <example>Return only location (e.g. ded, pro, act) and line number
                                information in the <code>@xml:id</code>s:
                                    <code>doc('/db/mitford/literary/Charles1.xml')//tei:l/substring-after(@xml:id,
                                    'Chas_')</code>
                            </example>
                            <example>Working with the expression we just wrote, how would you apply
                                    <code>substring-before()</code> to return only the location
                                (ded, pro, act), and trim off the line number information?
                                    <answer>Two ways: old-fashioned:
                                        <code>doc('/db/mitford/literary/Charles1.xml')//tei:l/substring-before(substring-after(@xml:id,
                                        'Chas_'), '_')</code> and more legible with simple map
                                    operator:
                                        <code>doc('/db/mitford/literary/Charles1.xml')//tei:l/substring-after(@xml:id,
                                        'Chas_') ! substring-before(.,'_')</code> Why can’t we use
                                    the arrow operator (<code>=></code>) here?</answer>
                            </example>
                        </examples></item>
                </details>
            </act>
            <act time="PT10M">
                <desc>Introducing variables</desc>
                <details>
                    <item>Global variables and syntax, how to return their values in eXist-db</item>
                    <item>In eXist-db, keep the TEI namespace declaration line, and copy the
                        following global variables: <examples>
                            <example>
                                <code>declare variable $Chas as document-node() :=
                                    doc('/db/mitford/literary/Charles1.xml');</code>
                            </example>
                            <example><code>declare variable $ChasPlay as element() :=
                                    $Chas/*;</code></example>
                            <example>Return the value of the variables by typing their names on the
                                next line <code>$Chas</code>, and <code>$ChasPlay</code>. Notice the
                                difference in the data type declaration and in the results. The
                                value after <code>as</code> could also be <code>xs:string</code> or
                                    <code>xs:integer()</code>.</example>
                        </examples>
                    </item>
                </details>
            </act>
            <act time="PT20M">
                <desc>Introducing FLWOR</desc>
                <details>
                    <item><code>FLWOR</code> keywords: <code>for</code>, <code>let</code>,
                            <code>where</code>, <code>order by</code>, <code>return</code></item>
                    <item>The simplest <code>FLWOR</code>: <code>let</code> (or <code>for</code>)
                        followed by <code>return</code></item>
                    <item>Retrieve a sequence of whole elements: <examples>
                            <example>
                                <code>let $places := $Chas//tei:placeName</code>
                            </example>
                            <example>
                                <code>return $places</code>
                            </example>
                            <example>How would you return only their text contents?
                                        <answer><code>$places/string()</code>, but notice the white
                                    space issues. Repair these with <code>return
                                        $places/normalize-space(string())</code></answer></example>
                        </examples>
                    </item>
                </details>
            </act>
        </slot>
        <slot time="13:30:00">
            <title>XQuery flow control</title>
            <act time="PT30M">
                <desc>Scavenger Hunt 2: in XQuery this time.</desc>
                <details>
                    <item> Work in eXist-db in the same file we started before the break and delete
                        only the <code>return</code> line. let’s keep adding to it. Use variables
                        and <code>FLWOR</code> statements to define and retrieve the following: <examples>
                            <example> Define a global variable pointing to the Digital Mitford site
                                index document, posted in eXist at <code>/db/mitford/si.xml</code>
                                or the official version at its external
                                    location:<code>http://digitalmitford.org/si.xml</code>. Hint:
                                Global variables need to be defined before <code>FLWOR</code>
                                statements. <answer><code>declare variable $si as document-node() :=
                                        doc('/db/mitford/si.xml');</code> or <code>declare variable
                                        $si as document-node() :=
                                        doc('http://digitalmitford.org/si.xml');</code> The new
                                    global variable must be added before the first <code>let</code>
                                    statement.</answer>
                            </example>
                            <example>Write a variable (either global or in <code>let</code> form)
                                that locates all of the <code>place</code> elements in the site
                                index document. Use the variable you just defined for the si.xml
                                document in your expression. <answer><code>let $siPlaces :=
                                        $si//tei:place</code> or as a global variable above the
                                    first let statement and after the variable defining the si.xml
                                    document: <code>declare variable $siPlaces :=
                                        $si//tei:place;</code>. </answer></example>
                            <example>For housekeeping purposes, rename the variable
                                    <code>$places</code> (that we defined earlier to retrieve
                                    <code>$Chas//tei:placeName</code>): Call it
                                    <code>$Chasplaces</code>.</example>
                            <example>Define a new variable to retrieve the values of the
                                    <code>@ref</code> on those <code>$Chasplaces</code><answer>Don’t
                                    forget the <code>string()</code> to return the attribute value:
                                        <code>let $ChasPlaceRefs :=
                                    $Chasplaces/@ref/string()</code></answer></example>
                            <example>How would you rewrite the last XPath Scavenger Hunt solution as
                                a <code>let</code> statement in this XQuery? (find references to
                                "CharlesI_MRMplay" in the site index): <answer><code>let $siChasRefs
                                        :=
                                        $si//tei:div/*/*[@xml:id][descendant::*/@*="#CharlesI_MRMplay"]</code></answer>
                            </example>
                        </examples>
                    </item>
                </details>
            </act>
            <act time="PT20M">
                <desc>Review XPath <code>for</code> loops; sequence and range variables
                    (&lt;oXygen/&gt;)</desc>
                <details>
                    <item>In the &lt;oXygen/&gt; XPath Builder View, try this code: <code>for $i in
                            ("Curly", "Larry", "Moe") return concat($i, " is a
                        Stooge!")</code></item>
                    <item>Can we write it as a simple map (with !)? <answer><code>("Curly", "Larry",
                                "Moe") ! concat(., " is a Stooge!")</code></answer>
                    </item>
                    <item>Open the Digital Mitford site index URL in &lt;oXygen/&gt; using
                            <code>http://digitalmitford.org/si.xml</code> . Try finding out the
                        following in the &lt;oXygen/&gt; XPath Builder: <examples>
                            <example>Find each person we have listed as born in Scotland in the site
                                index. Notice that sometimes place names are stored inside the
                                    <code>&lt;birth&gt;</code> elements. <answer><code>for $i in
                                        //person[contains(birth, "Scotland")] return $i</code>. You
                                    should return 28 <code>&lt;person&gt;</code>
                                entries.</answer></example>
                            <example>Now, modify that example to return the <code>@xml:id</code>,
                                (or anything else you want to find out about the person elements):
                                    <answer>For the <code>@xml:id</code>: <code>for $i in
                                        //person[contains(birth, "Scotland")] return
                                        $i/@xml:id</code>. Notice, we don’t need the
                                        <code>string()</code> function after the @xml:id in the
                                    &lt;oXygen/&gt; XPath builder vew, though it isn’t wrong to use
                                    it.</answer></example>
                        </examples>
                    </item>
                </details>
            </act>
            <act time="PT20M">
                <desc><code>FLWOR</code> statements in XQuery: how <code>for</code> works: Part
                    1</desc>
                <details>
                    <item><code>for</code> in XQuery and iterative returns: <code>for $i in
                            $YourSequenceVariable</code>. Look up the places coded in <emph>Charles
                            the First</emph> for their entries in the Digital Mitford site index. <examples>
                            <example>Get the distinct (unique) values of <code>@ref</code>
                                attributes on <code>placeName</code> elements. <answer><code>let
                                        $distChPRs :=
                                    distinct-values($ChasPlaceRefs)</code></answer></example>
                            <example>Next, loop through each of these distinct values:
                                        <answer><code>for $i in $distChPRs</code></answer>
                            </example>
                            <example>How will we find the site index entry that matches up with each
                                member of our sequence of place references in <emph>Charles the
                                    First</emph>? <answer>Each site index entry holds an
                                        <code>@xml:id</code>, and each <code>placeName</code>
                                    element has a <code>@ref</code> attribute whose value is
                                    formatted with a leading <code>#</code> followed by the
                                        <code>@xml:id</code> value.</answer></example>
                            <example>Write the variable that finds the site index entry whose
                                    <code>@xml:id</code> matches the value of the range variable in
                                our <code>for</code> loop. <answer><code>let $siCPrs :=
                                        $si//tei:place[@xml:id = substring-after($i,
                                    '#')]</code></answer></example>
                        </examples>
                    </item>
                </details>
            </act>
            <act time="PT10M">
                <desc>Break</desc>

            </act>
            <act time="PT30M">
                <desc><code>FLWOR</code> statements in XQuery: how <code>for</code> works: Part
                    2</desc>
                <!--ebb: Next: work with Charles I and places, and get the most popularly mentioned places, and retrieve their information from the SI. -->
                <details>

                    <item>Sorting and ordering your sequence: two ways: <examples>
                            <example>Apply the XPath <code>sort()</code> function to the variable
                                defining the sequence (above the <code>for</code> loop):
                                        <answer><code>let $distChPRs :=
                                        sort(distinct-values($ChasPlaceRefs))</code></answer></example>
                            <example>Or, inside the <code>for</code> loop with the XQuery
                                    <code>order by</code> statement: <code>order by
                                    [X-value-connected to your sequence]</code> followed by nothing
                                (default: ascending alphabetical order), or a keyword:
                                    <code>ascending</code> or <code>descending</code>. To order in
                                reverse alphabetical order by the <code>@xml:id</code> in the site
                                index entry? <answer><code>order by $siCPrs/@xml:id
                                        descending</code></answer>
                            </example>
                        </examples>
                    </item>
                    <item>Numbering the results with <code>$pos</code><examples>
                            <example>Set the <code>$pos</code> variable in the <code>for</code>
                                statement: <code>for $i at $pos in $YourSequenceVariable</code>, but
                                caution: <code>order by</code> happens <emph>after</emph>
                                <code>$pos</code> is set. So if we want sorted, numbered output?
                                    <answer>Use the <code>sort()</code> function before the
                                        <code>for</code> loop begins. Try a return like <code>return
                                        concat($pos, '. ',
                                $siCPrs/@xml:id/string())</code></answer></example>
                        </examples></item>
                    <item>Adding <code>where</code> in a <code>for-loop</code> to limit the returns <examples>
                            <example>Notice the blank results: A number of entries are not yet in
                                the site index. So we can limit by selecting only those where the
                                variable <code>$siCPrs</code> exists: <code>where $siCPRs</code>
                            </example>
                            <example>Or use where to return only results in the site index whose
                                    <code>string()</code> contains "France": <code>where
                                    $siCPrs[contains(string(.), 'France')]</code></example>
                        </examples></item>
                    <item>Which is more efficient in XQuery: a predicate or <code>where</code>? </item>
                    <item>Text returns: combining strings into one result: <code>concat()</code> and
                            <code>string-join()</code>
                        <examples>
                            <example> Retrieving a full canonical place name: <answer><code>let
                                        $name := $siCPrs/tei:placeName[1]</code></answer>
                            </example>

                        </examples>
                    </item>
                </details>
            </act>
            <act time="PT40M">
                <image size="icon"
                    alt="'To create a little flower is the labour of ages.' –William Blake, The Proverbs of Hell"
                    >flower.jpg</image>
                <desc>Putting it all together: writing FLWORs to make new files</desc>
                <details>
                    <item>HTML returns: how to use curly braces to layer and activate XQuery in an
                        HTML file. <examples>
                            <example>HTML table output:
                                    <link>https://ebeshero.github.io/UpTransformation/Chas1_FrenchPlaces.html</link></example>
                            <example>XQuery to make the HTML, in the newtfire eXist-db:
                                    <code>/db/DHSI-Queries/Chas-PersNameGraph-SVG.xql</code>, or on
                                GitHub:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/xquery/DHSI-Queries/Chas-SI-HTMLTable.xql</link>
                            </example>
                        </examples>
                    </item>
                    <item>SVG returns: a bar graph from XQuery <examples>
                            <example>SVG bar graph output:
                                    <link>http://newtfire.org:8338/exist/rest/db/DHSI-Queries/Chas-PersNameGraph-SVG.xql</link>
                                or
                                    <link>https://ebeshero.github.io/UpTransformation/Chas-PersNameGraph.svg</link></example>
                            <example>XQuery to make the SVG, in the newtfire eXist-db: <code>
                                    /db/DHSI-Queries/Chas-PersNameGraph-SVG.xql</code>, or on
                                GitHub:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/xquery/DHSI-Queries/Chas-PersNameGraph-SVG.xql</link></example>
                        </examples>
                    </item>
                </details>
            </act>
        </slot>
    </day>
    <day d="Wednesday">
        <title>XPath and XSLT</title>
        <slot time="09:00:00">
            <title>Introduction to XPath in XSLT</title>
            <act time="PT20M">
                <desc>Preparation for writing XSLT in &lt;oXygen&gt;</desc>
                <details>
                    <item>Settings: XSLT debugger and Saxon parser</item>
                    <item>Selecting files to run and save <examples>
                            <example>Open &lt;oXygen/&gt; and open the following url:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/ozymandias.xml</link></example>
                            <example>Open this starter XSLT file, too:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/xslt/xsltStarter1.xsl</link>.
                                Save this file locally on your computer.</example>
                        </examples>
                    </item>
                </details>
            </act>
            <act time="PT60M">
                <desc>XSLT overview in &lt;oXygen/&gt;</desc>
                <details>

                    <item>XSLT (eXtensible Stylesheet Language Transformations): an XML document
                        with special namespaced elements designed to process XML documents</item>
                    <item>Basic structure: <code>&lt;xsl:stylesheet&gt;</code> is the root element,
                        with <code>&lt;xsl:template&gt;</code> children.</item>
                    <item>Housekeeping: Namespaces and where they matter (<q>It’s always a namespace
                            issue.</q>) <examples>
                            <example><code>xsl:</code>: distinguishes the XSLT elements</example>
                            <example>Namespaced input: set <code>xpath-default-namespace</code> on
                                the xsl:stylesheet:
                                    <code>xpath-default-namespace="http://www.tei-c.org/ns/1.0"</code>
                            </example>
                            <example>Namespaced output: set
                                    <code>xmlns="http://www.w3.org/1999/xhtml"</code>
                            </example>
                        </examples>
                    </item>
                    <item>More housekeeping: <code>xsl:output</code> attributes:
                            <code>@method</code>, <code>@indent</code>,
                            <code>@omit-xml-declaration</code>, <code>@doctype-system</code>
                        <examples>
                            <example><code>&lt;xsl:output method="xml" indent="no"
                                    omit-xml-declaration="yes"/&gt;</code></example>
                            <example><code>&lt;xsl:output method="xhtml" encoding="utf-8"
                                    indent="yes" doctype-system="about:legacy-compat"
                                    omit-xml-declaration="yes"/&gt;</code></example>
                        </examples>
                    </item>
                    <item>A <emph>declarative programming language</emph>. Not written to be
                        executed in a line-by-line order. Template elements (or <emph>template
                            rules</emph>) do the work, but can be written in any order. </item>

                    <item>Templates match patterns: <code>&lt;xsl:template match="???"&gt;</code>:
                        The <code>@match</code> here is a special kind of XPath called an
                            <emph>XPath pattern</emph>, which could be found anywhere in the
                        document hierarchy. Note: It is inefficient for processing to write these
                        pattern expressions as we would an XPath search in the XPath Toolbar.</item>
                    <item>In each example below, look at the <code>@match</code> value: What should
                        the XPath pattern be matching in the source XML document? And how is this
                        XPath different from the way we write XPath in the XPath Toolbar? <examples>
                            <example><code>&lt;xsl:template match="div/head&gt;"</code>
                                <answer>Matches any <code>&lt;head&gt;</code> child of a
                                        <code>&lt;div&gt;</code> at any level of the XML hierarchy.
                                    In the XPath Toolbar, we have to start the expression with two
                                    leading forward slashes (<code>//</code>) to indicate we are
                                    looking <q>down</q> the tree from the document node.</answer>
                            </example>
                            <example><code>&lt;xsl:template match="div[count(descendant::p) gt
                                    1]&gt;"</code>
                                <answer>Matches any <code>&lt;div&gt;</code> element that contains
                                    multiple (more than one) <code>&lt;p&gt;</code> descendants. In
                                    the XPath toolbar, we must add <code>//</code> to the
                                    beginning.</answer>
                            </example>
                        </examples>
                    </item>
                    <item>Inside template rules, <code>&lt;xsl:apply-templates&gt;</code> drives the
                        selection of the next template rules to fire.
                            <code>&lt;xsl:apply-templates&gt;</code>
                        <emph>consumes</emph> the XML node matched in the template rule, and
                        determines that its children or other nodes in a set XPath relationship to
                        the template match will be processed. </item>
                    <item><code>xsl:apply-templates</code> with or without an <code>@select</code>:
                            <code>@select</code>
                        <q>prunes the tree</q> with a specific XPath expression that specifically
                        identifies which XML elements in the source document will be processed next.
                        Without <code>@select</code>, all element contents are consumed and
                        processed by default.</item>
                    <item>The XPath expression in <code>@select</code> is <emph>literal</emph> and
                        defined by its relation to the node being matched by the template rule (in
                        the <code>@match</code> on <code>xsl:template</code>. </item>
                    <item><code>xsl:apply-templates</code> with or without <code>@select</code>:
                            <code>@select</code>
                        <q>prunes the tree</q> with an XPath expression that specifically identifies
                        which XML elements in the source document will be processed next. Without
                            <code>@select</code>, all element contents are consumed and processed by
                        default.</item>
                    <item>The XPath expression in <code>@select</code> is <emph>literal</emph> and
                        defined by its relation to the node being matched by the template rule (in
                        the <code>@match</code> on <code>xsl:template</code>. </item>
                    <item>Complete <q>Ozymandias</q> transformation: <examples>
                            <example>XSLT:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/xslt/xsltOzy-to-html.xsl</link></example>
                            <example>Output HTML:
                                    <link>https://ebeshero.github.io/UpTransformation/ozymandias.html</link></example>
                        </examples>
                    </item>

                </details>
            </act>

            <act time="PT10M">
                <desc>Break</desc>
            </act>
            <act time="PT50M">
                <desc>Identity transformation for making changes to an XML file</desc>
                <details>

                    <item>Change the structure and add line numbers to the <q>Ozymandias</q> XML
                        file <examples>
                            <example>Open the url of our simple identity transformation starter:
                                    <code>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/xslt/ID-TransformSimple-Starter.xsl</code></example>
                            <example>Change the <code>&lt;line&gt;</code> elements to self-closing
                                    <code>&lt;lb&gt;</code> elements.</example>
                            <example>Work with <emph>attribute value templates</emph> to add numbers
                                to the new &lt;lb&gt; elements.</example>
                        </examples>
                    </item>
                    <item>Combining a collection of files into a single XML file <examples>
                            <example>See
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/xslt/coll-IDTransform.xsl</link>.</example>
                        </examples>
                    </item>

                    <item>Optional exercise: Repair our Pacific Voyage file: <examples>
                            <example>Open this file URL in &lt;oXygen/&gt;:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/xslt/ID-TransformTEI-Starter.xsl</link></example>
                            <example>Develop this XSLT file following this exercise:
                                    <link>http://dh.newtfire.org/XSLTExercise1.html</link></example>
                        </examples>
                    </item>

                </details>
            </act>
            <act time="PT15M">
                <desc>Comparing XSLT and XQuery</desc>
                <details>
                    <item>Invoking namespaces</item>
                    <item>Sequential processing</item>
                    <item>Pull vs. push processing</item>
                </details>
            </act>
            <act time="PT25M">
                <desc>Preparing XSLT to output HTML from TEI XML</desc>
                <details>
                    <item>The output we want:
                            <link>https://ebeshero.github.io/UpTransformation/dickinson16.html</link></item>
                    <item>Open this file URL in &lt;oXygen&gt;:
                            <code>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/xslt/TEI-HTML-Starter.xsl</code>
                    </item>
                    <item>
                        <code>&lt;xsl:stylesheet&gt;</code> and
                        <code>&lt;xsl:output&gt;</code></item>
                    <item>Template matching on the document node to output HTML</item>
                    <item> Structure of an HTML document: <code>&lt;head&gt;</code> and
                            <code>&lt;body&gt;</code></item>
                </details>
            </act>

        </slot>
        <slot time="13:30:00">
            <title>XSLT Activity</title>
            <act time="PT70M">
                <desc>TEI XML to HTML transformation</desc>
                <details>
                    <item>Open the url of the Emily Dickinson Fascicle 16 file:
                            <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/dickinsonColl.xml</link>,
                        and study the document.</item>
                    <item>Open this starter XSLT file url in &lt;oXygen/&gt;:
                            <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/xslt/TEI-HTML-Starter.xsl</link></item>
                    <item>Push processing: <code>&lt;xsl:apply-templates&gt;</code></item>
                    <item>Pruning the tree: when to use the <code>@select</code> attribute</item>
                    <item>When to use <code>&lt;xsl:value-of&gt;</code></item>
                </details>
            </act>


            <act time="PT10M">
                <desc>Break</desc>
            </act>
            <act time="PT70M">
                <desc>XSLT activity: Making a linked table of contents</desc>
                <details>
                    <item>Continue working with the XSLT we are writing on the Emily Dickinson
                        file.</item>
                    <item>Modal XSLT: Processing the same nodes in multipe ways <examples>
                            <example>The output we want:
                                    <link>https://ebeshero.github.io/UpTransformation/dickinson16-with-toc.html</link></example>
                            <example>Modal XSLT to create the table of contents:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/xslt/DickinsonModal-TransformHTML.xsl</link></example>
                        </examples>
                    </item>
                    <item>How internal links work</item>


                </details>

            </act>

        </slot>
    </day>
    <day d="Thursday">
        <title>XPath and Schematron</title>
        <slot time="09:00:00">
            <title>Using Schematron to constrain your markup</title>
            <act time="PT15M">
                <desc>Schematron overview</desc>
                <details>
                    <item>Schematron is <emph>constraint based</emph>; Relax NG, XML Schema, DTD are
                            <emph>grammar based</emph></item>
                    <item>Sample constraint-based tasks involve multiple elements<examples>
                            <example>Are start pages (<code>&lt;start&gt;</code>) no larger than end
                                pages (<code>&lt;end&gt;</code>)?</example>
                            <example>Are birth dates no later than death dates?</example>
                            <example>Does a list (e.g., of students in a course) contain
                                duplicates?</example>
                            <example>Do pointers to persons really point to persons (and not
                                places)?</example>
                        </examples></item>
                    <item>Schematron structure: <code>&lt;pattern&gt;</code> →
                            <code>&lt;rule&gt;</code> → <code>&lt;assert&gt;</code> or
                            <code>&lt;report&gt;</code></item>
                </details>
            </act>
            <act time="PT30M">
                <desc>Looking at Schematron</desc>
                <details>
                    <item>Document analysis of our XML:
                            <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/pages.xml</link><examples>
                            <example><code>&lt;start&gt;</code> shouldn’t be greater than
                                    <code>&lt;end&gt;</code></example>
                            <example><code>&lt;issue&gt;</code> is optional, but we could omit it by
                                mistake</example>
                            <example><code>&lt;initial&gt;</code> should usually be one
                                letter</example>
                            <example>Apostrophes and quotation marks should usually be curly (“, ”,
                                ‘, ’), not straight (', ")</example>
                        </examples></item>
                    <item>What Relax NG can constrain:
                            <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/pages.rnc</link><examples>
                            <example><code>&lt;volume&gt;</code>, <code>&lt;issue&gt;</code>,
                                    <code>&lt;year&gt;</code>, <code>&lt;start&gt;</code>, and
                                    <code>&lt;end&gt;</code> must be positive integers</example>
                            <example><code>&lt;year&gt;</code> must be exactly four digits</example>
                            <example><code>&lt;issue&gt;</code> is optional</example>
                            <example>No empty elements</example>
                        </examples></item>
                    <item>Schematron to the rescue:
                            <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/pages.sch</link><examples>
                            <example>Anatomy of a schematron rule</example>
                            <example>Validating start and end pages</example>
                            <example>Validating apostrophes and quotation marks (text, not
                                markup)</example>
                        </examples></item>
                    <item>Associating Schematron with XML</item>
                </details>
            </act>
            <act time="PT20M">
                <desc>Schematron error reporting</desc>
                <details>
                    <item>Schematron has the best error messages</item>
                    <item>Enhance Schematron reporting with <code>&lt;sch:value-of&gt;</code>:
                            <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/pages_value-of.sch</link></item>
                    <item>Enhance Schematron maintenance with <code>&lt;sch:let&gt;</code>:
                            <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/pages_variables.sch</link></item>
                    <item>Generate warnings as well as errors with <code>@role</code>:
                            <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/pages_warnings.sch</link></item>
                </details>
            </act>
            <act time="PT20M">
                <desc>XPath functions practice: Leipzig glossing rules, part 1</desc>
                <details>
                    <item>Document analysis:
                            <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/leipzig.xml</link></item>
                    <item>Target output:
                            <link>http://htmlpreview.github.io/?https://github.com/ebeshero/UpTransformation/blob/master/data/leipzig.html</link></item>
                    <item>Validation challenge: the spaces and hyphens need to be aligned</item>
                    <item>Best practice<examples>
                            <example>Test the XPath separately first</example>
                            <example>Develop and test incrementally</example>
                        </examples></item>
                    <item>Schematron validation<examples>
                            <example>Housekeeping: create the Schematron skeleton in
                                &lt;oXygen/&gt;, save it, link it to XML</example>
                            <example>Two ways of counting spaces and hyphens<examples>
                                    <example><code
                                            url="https://www.w3.org/TR/xpath-functions-31/#func-translate"
                                            >translate()</code><answer><code>string-length('one two
                                                three') - string-length(translate('one two three', '
                                                ', ''))</code></answer></example>
                                    <example><code
                                            url="https://www.w3.org/TR/xpath-functions-31/#func-tokenize"
                                            >tokenize()</code>
                                        <answer><code>count(tokenize('one two three', ' '))</code>
                                            or <code>tokenize(('Curly Larry Moe') ,'\s+') =>
                                                count()</code></answer></example>
                                </examples></example>
                        </examples></item>
                </details>
            </act>
            <act time="PT10M">
                <desc>Break</desc>
            </act>
            <act time="PT40M">
                <desc>XPath functions practice: Leipzig glossing rules, part 2</desc>
                <details>
                    <item>Comparing three things <examples>
                            <example>Three-way test not available in XPath<examples>
                                    <example><code>$a eq $b eq $c</code></example>
                                    <example><code>$a lt $b lt $c</code></example>
                                </examples></example>
                            <example>What is available <examples>
                                    <example>Composite expression: <code>$a eq $b and $b eq
                                            $c</code></example>
                                    <example>Compare to average value: <code>($a, $b, $c) !=
                                            avg(($a, $b, $c))</code></example>
                                    <example>Count distinct values<examples>
                                            <example><code>count(distinct-values(($a, $b, $c))) eq
                                                  1</code></example>
                                            <example><code>distinct-values(($a, $b, $c)) => count()
                                                  eq 1</code></example>
                                        </examples></example>
                                </examples></example>
                        </examples></item>
                    <item>Whitespace normalization<examples>
                            <example>Require it in the XML with Relax NG <answer><code>xsd:string {
                                        pattern = "(\S+ )*\S+" }</code></answer></example>
                            <example>Require it in the XML with Schematron <answer><code>test='. eq
                                        normalize-space(.)'</code></answer></example>
                            <example>Manage it with Schematron inside tier-comparison <answer>test
                                        <code>normalize-space(.)</code> instead of just
                                        <code>.</code></answer></example>
                        </examples>
                    </item>
                    <item>Solutions<examples>
                            <example>Simple
                                        <answer><link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/leipzig-basic.sch</link></answer></example>
                            <example>Enhanced
                                        <answer><link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/leipzig.sch</link></answer></example>
                            <example>Finding which word has a hyphen misalignment
                                        <answer><link>http://htmlpreview.github.io/?https://github.com/ebeshero/UpTransformation/blob/master/data/leipzig-enhanced.html</link></answer></example>
                        </examples></item>
                </details>
            </act>
            <act time="PT25M">
                <desc>The Three Stooges go to Schematron Summer Camp</desc>
                <details>
                    <item>The Edge Case Saloon<examples>
                            <example>“QA Engineer walks into a bar. Orders a beer. Orders 0 beers.
                                Orders 999999999 beers. Orders a lizard. Orders -1 beers. Orders a
                                sfdeljknesv.”</example>
                            <example>More edge cases at
                                    <link>https://www.sempf.net/post/On-Testing1</link></example>
                        </examples></item>
                    <item>Best Stooge Ever contest results:
                            <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/stooges.xml</link></item>
                    <item>Hands on validation tasks<examples>
                            <example>All stooges must have percentages (no empty
                                    <code>&lt;stooge&gt;</code> elements)</example>
                            <example>Percentages total 100</example>
                            <example>Individual votes range from 0 through 100, inclusive</example>
                            <example>There are exactly three stooges!</example>
                            <example>No duplicate stooges!</example>
                        </examples></item>
                    <item>Solution (no peeking!)
                                <answer><link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/stooges.sch</link></answer></item>
                </details>
            </act>
            <act time="PT20M">
                <desc>One more way of counting spaces and hyphens</desc>
                <details>

                    <item>Explode the string<examples>
                            <example><code
                                    url="https://www.w3.org/TR/xpath-functions-31/#func-string-to-codepoints"
                                    >string-to-codepoints()</code>, <code
                                    url="https://www.w3.org/TR/xpath-functions-31/#func-codepoints-to-string"
                                    >codepoints-to-string()</code></example>
                            <example><code>for $c in string-to-codepoints('one two three') return
                                    codepoints-to-string($c)</code></example>
                        </examples>
                    </item>
                    <item>Find the index values of the spaces<examples>
                            <example><code
                                    url="https://www.w3.org/TR/xpath-functions-31/#func-index-of"
                                    >index-of()</code></example>
                            <example><code>index-of(('a', 'b', 'c', 'b', 'a'), 'a')</code></example>
                        </examples></item>
                    <item>Count them<examples>
                            <example><code>count(index-of(for $c in string-to-codepoints('one two
                                    three') return codepoints-to-string($c), ' '))</code></example>
                        </examples></item>
                    <item>Make it legible<examples>
                            <example><code>string-to-codepoints('one two three') !
                                    codepoints-to-string(.) =&gt; index-of(' ') =&gt;
                                count()</code></example>
                        </examples></item>
                </details>
            </act>
        </slot>
        <slot time="13:30:00">
            <title>Schematron and external files</title>
            <act time="PT25M">
                <desc>ID/IDREF validation</desc>
                <details>
                    <item>Files<examples>
                            <example>Instance:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/letter_id-idref.xml</link></example>
                            <example>Relax NG:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/letter_id-idref.rnc</link></example>
                            <example>Transformed:
                                    <link>http://htmlpreview.github.io/?https://github.com/ebeshero/UpTransformation/blob/master/data/letter_id-idref.html</link></example>
                        </examples></item>
                    <item>Details<examples>
                            <example>Datatypes <code>xsd:ID</code>, <code>xsd:IDREF</code>,
                                    <code>xsd:IDREFS</code></example>
                            <example>Value must be unique within the document</example>
                            <example>Lexical space: <emph>NCName</emph> (begin with letter or
                                underscore, may contain letters, digits, underscores, hyphens,
                                periods) (simplified)</example>
                            <example><code>@xml:id</code> is not of type <code>xsd:ID</code> unless
                                your schema says it is</example>
                            <example>You don’t have to call it <code>@xml:id</code>, but you
                                should</example>
                            <example>Validates by exact string matching</example>
                        </examples></item>
                    <item>Limitations<examples>
                            <example>Validates only within the same file (but XInclude can
                                help)</example>
                            <example>No subcategory support (e.g., you can’t require person IDREF to
                                match only person ID)</example>
                            <example>Cannot require mixed content to be non-empty</example>
                        </examples></item>
                    <item>Desiderata<examples>
                            <example>Validation against external (remote) files</example>
                            <example>Subcategory support</example>
                            <example>Require (selected) mixed content to be non-empty</example>
                        </examples></item>
                </details>
            </act>
            <act time="PT20M">
                <desc>General comparison and value comparison</desc>
                <details>
                    <item>Value comparison<examples>
                            <example>Operators: <code>eq</code>, <code>ne</code>, <code>lt</code>,
                                    <code>gt</code>, <code>le</code>, <code>ge</code></example>
                            <example>Compares one thing to one thing</example>
                            <example>Example: <code>count(distinct-values(('Curly', 'Larry',
                                    'Moe'))) eq 1</code></example>
                        </examples></item>
                    <item>General comparison<examples>
                            <example>Operators: <code>=</code>, <code>!=</code>, <code>&lt;</code>,
                                    <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code> (angle
                                brackets may have to be spelled <code>&amp;lt;</code>,
                                    <code>&amp;gt;</code>)</example>
                            <example>Compares sequences of any length</example>
                            <example>Example:<examples>
                                    <example><code>'Curly' = ('Curly', 'Larry',
                                        'Moe')</code></example>
                                    <example>What does <code>'Curly' != ('Curly', 'Larry',
                                            'Moe')</code> return? What should we have written
                                        instead? <answer><code>not('Curly' = ('Curly', 'Larry',
                                                'Moe'))</code></answer></example>
                                </examples></example>
                            <example><code>substring(@ref, 2) =
                                $ancillary//person/@xml:id</code></example>
                        </examples></item>
                </details>
            </act>
            <act time="PT25M">
                <desc>Schematron validation</desc>
                <details>
                    <item>Instance:
                            <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/letter_schematron.xml</link></item>
                    <item>Relax NG:
                            <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/letter_schematron.rnc</link></item>
                    <item>Schematron:
                            <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/letter_schematron.sch</link></item>
                    <item>External reference file:
                            <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/letter_schematron_ancillary.xml</link></item>
                </details>
            </act>
            <act time="PT10M">
                <desc>Break</desc>
            </act>
            <act time="PT15M">
                <desc>Exploring Digital Mitford</desc>
                <details>
                    <item>Project site: <link>http://digitalmitford.org</link></item>
                    <item>Site index<examples>
                            <example>Workshop repo on GitHub:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/si.xml</link></example>
                            <example>Mitford project site:
                                    <link>http://digitalmitford.org/si.xml</link></example>
                            <example>Outline:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/si-outline.xml</link></example>
                        </examples></item>
                </details>
            </act>
            <act time="PT25M">
                <desc>Hamilton 1823-04-09 letter</desc>
                <details>
                    <item>Letter <examples>
                            <example>XML:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/1823-04-09-Hamilton.xml</link></example>
                            <example>Read on line:
                                    <link>http://digitalmitford.org/getLetterText.php?uri=1823-04-09-Hamilton.xml</link></example>
                        </examples></item>
                    <item>Schematron starter:
                            <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/mitford.sch</link></item>
                    <item>Tasks <examples>
                            <example>Save local copy of Schematron</example>
                            <example>Associate letter with local copy</example>
                            <example>Test validation of <code>&lt;editor&gt;</code>
                                element</example>
                            <example>Add and test rules for other element types</example>
                        </examples></item>
                </details>
            </act>
            <act time="PT30M">
                <desc>Webb 1819-05-16 letter</desc>
                <details>
                    <item>Letter <examples>
                            <example>XML:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/1819-05-16_MWebb.xml</link></example>
                            <example>Read on line:
                                    <link>http://digitalmitford.org/getLetterText.php?uri=1819-05-16_MWebb.xml</link></example>
                        </examples></item>
                    <item>Schematron starter:
                            <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/mitford-back.sch</link></item>
                    <item>New items for the site index are in the <code>&lt;back&gt;</code>
                        <examples>
                            <example>Some <code>@ref</code> values in the back have also already
                                been added to the site index; report pointers to them as
                                errors</example>
                            <example>Some <code>@ref</code> values in the back still have to be
                                added to the site index; report them as <q>info</q></example>
                            <example>If an element that should have a <code>@ref</code> doesn’t,
                                report an error</example>
                        </examples></item>
                </details>
            </act>
        </slot>
    </day>
    <day d="Friday">
        <title>Taking stock</title>
        <slot time="09:00:00">
            <title>Putting it all to work</title>
            <act time="PT1H">
                <desc>XPath in up-conversion: Syriaca taxonomy</desc>
                <details>
                    <item>Project context: <link>http://syriaca.org/</link></item>
                    <item>Planning ahead <examples>
                            <example>Document analysis <examples>
                                    <example>Google spreadsheet:
                                            <link>https://docs.google.com/spreadsheets/d/1p9VMDrrM1N_TDrs7oTWHz2wekzu3j4HJOq09AAla2Pg/edit?usp=sharing</link>
                                        <examples>
                                            <example>Title for display (A)</example>
                                            <example>Title for filename (E)</example>
                                            <example>Terms (multiple languages) (O, P, Q, S, U, V,
                                                X, Z)</example>
                                            <example>Glosses (multiple languages) (I, J, K, L, M, N,
                                                R, T, W, Y, AA)</example>
                                            <example>Relations (AC, AD, AE, AF, AG, AH, AI, AJ, AK,
                                                AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX,
                                                AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK,
                                                BL, BM, BN, BO, BP, BQ)</example>
                                            <example>Identifiers (idno) (F, G, H)</example>
                                            <example>Note (AB)</example>
                                        </examples></example>
                                    <example>TSV export:
                                            <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/syriaca/Taxonomy.tsv</link></example>
                                </examples></example>
                            <example>Output specification</example>
                        </examples>
                    </item>
                    <item><emph>Pull</emph> vs <emph>push</emph> processing</item>
                    <item>Autotagging plain text with XSLT (<emph>upconversion</emph>) <examples>
                            <example>XSLT:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/data/syriaca/Taxonomy.xsl</link></example>
                            <example>Features<examples>
                                    <example>Documentation (comments; 7)</example>
                                    <example>Variables (<code
                                            url="https://www.w3.org/TR/xslt-30/#variables"
                                            >&lt;xsl:variable&gt;</code>; 26)</example>
                                    <example>Typing with <code>@as</code> (variables, parameters,
                                        functions; 26)</example>
                                    <example>User-defined functions (<code
                                            url="https://www.w3.org/TR/xslt-30/#stylesheet-functions"
                                            >&lt;xsl:function&gt;</code>; 11)</example>
                                    <example>Apply XSLT to non-XML input (<code
                                            url="https://www.w3.org/TR/xpath-functions-31/#func-unparsed-text-lines"
                                            >unparsed-text-lines()</code>; 26)</example>
                                    <example>Omit input document specification (<code
                                            url="https://www.w3.org/TR/xslt-30/#invoking-initial-template"
                                            >&lt;xsl:template
                                        name="xsl:initial-template"&gt;</code>; 61)</example>
                                    <example><code
                                            url="https://www.w3.org/TR/xpath-functions-31/#func-tokenize"
                                            >tokenize()</code> (44)</example>
                                    <example><code
                                            url="https://www.w3.org/TR/xpath-functions-31/#func-index-of"
                                            >index-of()</code> (48) and the user-defined
                                            <code>skos:index-of-starts-with()</code> (11)</example>
                                    <example><code url="https://www.w3.org/TR/xslt-30/#message"
                                            >&lt;xsl:message&gt;</code> (65)</example>
                                    <example><code
                                            url="https://www.w3.org/TR/xslt-30/#creating-processing-instructions"
                                            >&lt;xsl:processing-instruction&gt;</code>
                                        (75)</example>
                                    <example>Test whether a value exists with
                                            <code>&lt;xsl:if&gt;</code> before creating output<examples>
                                            <example><code>&lt;xsl:if
                                                  test="string-length(normalize-space($values[current()]))
                                                  ne 0"&gt;</code> (228)</example>
                                            <example>see esp. <code>&lt;listRelation&gt;</code>
                                                (251)</example>
                                        </examples></example>
                                    <example><code
                                            url="https://www.w3.org/TR/xslt-30/#creating-attributes"
                                            >&lt;xsl:attribute&gt;</code> (275)</example>
                                </examples></example>
                        </examples></item>
                    <item>Using the &lt;oXygen/&gt; Outline view with XML and XSLT</item>
                    <item>Running saxon
                            (<link>https://sourceforge.net/projects/saxon/files/Saxon-HE/</link>)
                        from the command line <code>saxon -it Taxonomy.xsl</code></item>
                </details>
            </act>
            <act time="PT25M">
                <desc>Resources and references</desc>
                <details>
                    <item><link>https://ebeshero.github.io/UpTransformation/References.html</link></item>
                </details>
            </act>
            <act time="PT10M">
                <desc>Break</desc>
            </act>
            <act time="PT1H">
                <desc>Building our syllabus</desc>
                <details>

                    <item>Author in XML, validating with Relax NG and Schematron<examples>
                            <example>XML:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/_includes/schedule/schedule.xml</link></example>
                            <example>RelaxNG:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/_includes/schedule/schedule.rnc</link></example>
                            <example>Schematron:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/_includes/schedule/schedule.sch</link></example>
                        </examples></item>
                    <item>Transform to fragment (<code>&lt;section&gt;</code>) with XSLT for
                        inclusion in GitHub pages<examples>
                            <example>XSLT:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/_includes/schedule/schedule-full.xsl</link></example>
                            <example>Features<examples>
                                    <example><code>@omit-xml-declaration</code> (6)</example>
                                    <example>User-defined function (7)</example>
                                    <example><code>@id</code> on <code>&lt;button&gt;</code>
                                        elements (14)</example>
                                    <example>Construct <code>&lt;h2&gt;</code> (26)</example>
                                    <example>Calculate time range (38)</example>
                                    <example>Datatype wrangling (48)</example>
                                    <example><code>@class</code> on <code>&lt;button&gt;</code>
                                        elements (62)</example>
                                    <example><code>&lt;xsl:call-template&gt;</code> (75)</example>
                                    <example>Matching multiple element types in a single template
                                        (88)</example>
                                    <example>Dynamic element construction with
                                            <code>&lt;xsl:element&gt;</code> (125)</example>
                                </examples></example>
                        </examples></item>
                    <item>XInclude fragment in wrapper and transform to full local schedule with XSLT<examples>
                            <example>XML wrapper:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/_includes/schedule/wrapper.xml</link></example>
                            <example>XSLT:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/_includes/schedule/identity.xsl</link></example>
                        </examples></item>
                    <item>Use XProc to manage pipeline<examples>
                            <example>XProc:
                                    <link>https://raw.githubusercontent.com/ebeshero/UpTransformation/master/_includes/schedule/schedule.xpl</link></example>
                        </examples></item>
                </details>
            </act>
            <act time="PT25M">
                <desc>Retrospective</desc>
            </act>
        </slot>
    </day>
</schedule>
